AUTORES:
 - Martín Del Río Álvarez          martin.delrio.alvarez@udc.es
 - Mateo Aguirre Cancela           mateo.aguirre@udc.es
 
INTRODUCCIÓN:
	En esta práctica se llevarán a cabo diversas operaciones sobre montículos, con el objetivo de estudiar la complejidad de la operación "crear_monticulo" y demostrar que su ejecución tiene un tiempo O(n).
	Se implementará además el algoritmo de ordenación por montículos, y se procederá a calcular empíricamente su complejidad en tres contextos distintos: cuando se le suministra un vector ya ordenado de manera ascendente, cuando se le proporciona un vector ya ordenado de manera descendente, y cuando se le pasa un vector generado aleatoriamente.

TEST:
	Creamos un monticulo con el siguiente vector:
	[ -7  -5  -2   2  -1   8  -2  10   3   7 ]
	Vamos eliminando el elemento menor hasta que no quede ningún número en el montículo:
	[ -5  -1  -2   2   7   8  -2  10   3 ]
    	[ -2  -1  -2   2   7   8   3  10 ]
    	[ -2  -1   3   2   7   8  10 ]
    	[ -1   2   3  10   7   8 ]
    	[  2   7   3  10   8 ]
    	[  3   7   8  10 ]
    	[  7  10   8 ]
    	[  8  10 ]
    	[ 10 ]
    	[]
	Comprobamos el funcionamiento de ordenacion por monticulos:
	[ -7  -5  -2  -2  -1   2   3   7   8  10 ]

ESPECIFIACIONES DE LA MÁQUINA:
	·Modelo: HUAWEI MateBook 14 AMD 2021
	·Procesador: AMD Ryzen 5 5500U
	·Memoria RAM: 8gb
	·Sistema operativo: Linux Ubuntu 22.04.3 LTS
	·Kernel: 6.2.0-33-generic

ACLARACIONES:
	Todas las unidades de tiempo estan medidas en microsegundos.
	El valor de n sigue una progresión geométrica de razón dos.
	Los símbolos (*) colocados a la izquierda de ciertos tiempos indican que el tiempo de ejecución para ese valor de n es inferior a 500 microsegundos. Esto implica que el algoritmo se repitió 1000 (contante k) veces y posteriormente se calculó una media.

TABLAS DE TIEMPOS:

Tabla para demostrar la complejidad de crear monticulo O(n):
             n             t(n)      t(n)/n^0.9          t(n)/n      t(n)/n^1.2
(*)       1000         4.887000        0.009751        0.004887        0.001228
(*)       2000         9.712000        0.010384        0.004856        0.001062
(*)       4000        19.377000        0.011103        0.004844        0.000922
(*)       8000        39.616000        0.012164        0.004952        0.000821
(*)      16000        78.425000        0.012905        0.004902        0.000707
(*)      32000       155.634000        0.013724        0.004864        0.000611
(*)      64000       308.391000        0.014573        0.004819        0.000527
        128000       746.000000        0.018891        0.005828 (#)    0.000555

-COTAS:
    cota subestimada:  n^0.9
    cota ajustada:     n
    cota sobrestimada: n^1.2

(#) ANOMALIAS:
    -Se puede observar una ligera anomalía para n=128000 (#), la cual no se ha podido lograr que se acerque al valor aproximado de la cota ajustada.

-OBSERVACIONES:
    -Los resultados de la cota subestimada nos ofrece unos valores ascendentes.
    -Al contrario ocurre con la sobrestimada, pues estos decrecen.
    -La cota ajustada se aproxima 0.0048

VECTOR EN ORDEN ASCENDENTE
             n             t(n)     t(n)/n^0.92   t(n)/n*log(n)      t(n)/n^1.4
(*)        500        36.039000        0.118501        0.011598 (#)    0.006001
(*)       1000        95.351000        0.165701        0.013803        0.006016
(*)       2000       223.087000        0.204893        0.014675        0.005334
(*)       4000       485.562000        0.235695        0.014636        0.004399
          8000      1043.000000        0.267573        0.014507        0.003581
         16000      2216.000000        0.300455        0.014307        0.002883
         32000      4665.000000        0.334283        0.014053        0.002300
         64000      9783.000000        0.370499        0.013813        0.001827
        128000     20654.000000        0.413401        0.013721        0.001462

-COTAS:
	cota subestimada:  n^0.92
	cota ajustada:     n*log(n)
	cota sobrestimada: n^1.4

(#) ANOMALIAS:
	-Se puede observar una ligera anomalía para n=500 (#), la cual no se ha podido lograr que se acerque al valor aproximado de la cota ajustada.

-OBSERVACIONES:
	-Los resultados de la cota subestimada nos ofrece unos valores ascendentes.
	-Al contrario ocurre con la sobrestimada, pues estos decrecen.
	-La cota ajustada se aproxima 0.014

VECTOR EN ORDEN DESCENDENTE
             n             t(n)     t(n)/n^0.92   t(n)/n*log(n)      t(n)/n^1.4
(*)        500        42.762000        0.140607        0.013762        0.007120
(*)       1000       102.427000        0.177998        0.014828        0.006463
(*)       2000       242.445000        0.222672        0.015948        0.005797
          4000       506.000000        0.245615        0.015252        0.004584
          8000      1069.000000        0.274243        0.014868        0.003670
         16000      2259.000000        0.306285        0.014585        0.002939
         32000      4747.000000        0.340158        0.014300        0.002340
         64000     10002.000000        0.378792        0.014122        0.001868
        128000     20962.000000        0.419565        0.013926        0.001484

-COTAS:
	cota subestimada:  n^0.92
	cota ajustada:     n*log(n)
	cota sobrestimada: n^1.4

(#) ANOMALIAS:
	-No se observan anomalías.

-OBSERVACIONES:
	-Los resultados de la cota subestimada nos ofrece unos valores ascendentes.
	-Al contrario ocurre con la sobrestimada, pues estos decrecen.
	-La cota ajustada se aproxima 0.014

VECTOR EN ORDEN ALEATORIO
             n             t(n)     t(n)/n^0.92   t(n)/n*log(n)      t(n)/n^1.4
(*)        500        62.641000        0.205971        0.020159 (#)    0.010430
(*)       1000       126.928000        0.220576        0.018375        0.008009
(*)       2000       276.674000        0.254109        0.018200        0.006615
          4000       650.000000        0.315514        0.019592        0.005889
          8000      1322.000000        0.339148        0.018387        0.004538
         16000      2826.000000        0.383161        0.018246        0.003676
         32000      6053.000000        0.433743        0.018235        0.002984
         64000     12917.000000        0.489188        0.018238        0.002413
        128000     27415.000000        0.548725        0.018213        0.001940

-COTAS:
	cota subestimada:  n^0.92
	cota ajustada:     n*log(n)
	cota sobrestimada: n^1.4

(#) ANOMALIAS:
	-Se puede observar una ligera anomalía para n=500 (#), la cual no se ha podido impedir que se desvíe ligeramente del valor aproximado de la cota ajustada.

-OBSERVACIONES:
	-Los resultados de la cota subestimada nos ofrece unos valores ascendentes.
	-Al contrario ocurre con la sobrestimada, pues estos decrecen.
	-Y la cota ajustada se aproxima 0.018

CONCLUSIONES:
    -Analizando la tabla de tiempos para demostar la complejidad de la operación crear montículo vemos que se obtiene un buen valor aproxiamado para la cota ajustada (n) con lo que podemos afirmar que dicha operación tiene un complejidad lineal O(n).
    -Podemos también observar que el algoritmo de ordenación por montículos para los 3 casos (vector ascendente, vector descendente y vector aleatorio) tiene una complejidad de orden O(n*log(n)).
    -Otra conclusión a resaltar es que los vectores que más rápido se ordenan son el vector descendente y el ascendente, y el que más tarda es el generado aleatoriamente, siendo muy notable la diferencia respecto a los vectores ascendentes y descendentes. En cambio, los tiempos de estos dos últimos son bastante similares.
