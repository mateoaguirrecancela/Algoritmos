AUTORES:
 - Martín Del Río Álvarez          martin.delrio.alvarez@udc.es
 - Mateo Aguirre Cancela           mateo.aguirre@udc.es
 
INTRODUCCIÓN:
        Esta práctica se enfoca en analizar la complejidad computacional de dos algoritmos de ordenación: ordenación por inserción y ordenación shell. 
	Se generan vectores que actúan como entrada para evaluar el rendimiento de estos algoritmos en diversas situaciones.

OBJETIVO:
        El objetivo principal de esta práctica es medir los tiempos de ejecución de los algoritmos de ordenación por inserción y ordenación shell.
        Se ponen a prueba los algoritmos en diferentes condiciones, con datos ordenados de manera ascendente, descendente y desordenados.
        De esta manera podemos comparar sus tiempos en cada una de las condiciones para ver cual es más eficiente.

TEST:
        Primero se realizará un test para evaluar el funcionamiento de cada uno de los algoritmos em las tres situaciones (vector en orden ascendente, vector en orden descendente y vector desordenado)
        Después se realizará un test para analizar los tiempos de ejecución de cada algoritmo en cada situación. Para ello usamos vectores de un tamaño que va desde 500 hasta 32000 siguiendo una progresión geométrica de razón dos y utilizando unas cotas en función a la complejidad de este.


ESPECIFIACIONES DE LA MÁQUINA:
	·Modelo: HUAWEI MateBook 14 AMD 2021
	·Procesador: AMD Ryzen 5 5500U
	·Memoria RAM: 8gb
	·Sistema operativo: Linux Ubuntu 22.04.3 LTS
	·Kernel: 6.2.0-33-generic

ACLARACIONES:
	Todas las unidades de tiempo estan medidas en microsegundos.

TABLAS DE TIEMPOS:

VECTOR EN ORDEN ASCENDENTE
Ordenacion por Insercion
            n              t(n)      t(n)/n^0.8          t(n)/n      t(n)/n^1.2
(*)       500          2.523000        0.017488        0.005046        0.001456
(*)      1000          5.085000        0.020244        0.005085        0.001277
(*)      2000         10.294000        0.023537        0.005147        0.001126
(*)      4000         20.199000        0.026527        0.005050        0.000961
(*)      8000         41.960000        0.031649        0.005245        0.000869
(*)     16000         81.485000        0.035301        0.005093        0.000735
(*)     32000        162.056000        0.040322        0.005064        0.000636

Ordenacion Shell
            n              t(n)          t(n)/n   t(n)/n*log(n)      t(n)/n^1.5
(*)       500         13.006000        0.026012        0.004186        0.001163
(*)      1000         29.652000        0.029652        0.004293        0.000938
(*)      2000         66.041000        0.033021        0.004344        0.000738
(*)      4000        144.236000        0.036059        0.004348        0.000570
(*)      8000        314.704000        0.039338        0.004377        0.000440
        16000        645.000000        0.040313        0.004164        0.000319
        32000       1400.000000        0.043750        0.004217        0.000245


VECTOR EN ORDEN DESCENDENTE
Ordenacion por Insercion
            n              t(n)      t(n)/n^1.8        t(n)/n^2      t(n)/n^2.2
(*)       500        237.807000        0.003297        0.000951        0.000274
         1000        942.000000        0.003750        0.000942        0.000237
         2000       3746.000000        0.004283        0.000937        0.000205
         4000      14978.000000        0.004918        0.000936        0.000178
         8000      61551.000000        0.005803        0.000962        0.000159
        16000     248159.000000        0.006719        0.000969        0.000140
        32000    1027489.000000        0.007989        0.001003        0.000126

Ordenacion Shell
            n              t(n)          t(n)/n   t(n)/n*log(n)      t(n)/n^1.5
(*)       500         19.191000        0.038382        0.006176        0.001716
(*)      1000         43.676000        0.043676        0.006323        0.001381
(*)      2000        105.238000        0.052619        0.006923        0.001177
(*)      4000        219.073000        0.054768        0.006603        0.000866
(*)      8000        476.204000        0.059526        0.006623        0.000666
        16000        987.000000        0.061687        0.006372        0.000488
        32000       2095.000000        0.065469        0.006311        0.000366


VECTOR DESORDENADO
Ordenacion por Insercion
            n              t(n)      t(n)/n^1.8        t(n)/n^2      t(n)/n^2.2
(*)       500        127.676000        0.001770        0.000511        0.000147
(*)      1000        487.900000        0.001942        0.000488        0.000123
         2000       1877.000000        0.002146        0.000469        0.000103
         4000       7612.000000        0.002499        0.000476        0.000091
         8000      29878.000000        0.002817        0.000467        0.000077
        16000     120054.000000        0.003251        0.000469        0.000068
        32000     480634.000000        0.003737        0.000469        0.000059

Ordenacion Shell
            n              t(n)          t(n)/n      t(n)/n^1.2      t(n)/n^1.4
(*)       500         47.566000        0.095132        0.027449        0.007920
(*)      1000        108.791000        0.108791        0.027327        0.006864
(*)      2000        246.321000        0.123160        0.026932        0.005889
         4000        510.000000        0.127500        0.024272        0.004620
         8000       1177.000000        0.147125        0.024382        0.004041
        16000       2659.000000        0.166187        0.023976        0.003459
        32000       6080.000000        0.190000        0.023863        0.002997
          
CONCLUSIONES:
        En resumen, esta práctica permitió analizar y comparar el rendimiento de los algoritmos de ordenación por inserción y ordenación shell en diversas condiciones. 
        Los resultados destacan la importancia de elegir el algoritmo de ordenación adecuado según la naturaleza de los datos y las características del hardware y el entorno.
        Analizando los resultados de las tablas, se puede observar que con vectores en orden ascendente es notablemente mejor el algoritmo de ordenacion por inserccion. 
        En cambio en las otras dos situaciones, con un vector en orden descendente y un vector aleatorio, es mucho mas eficiente el algoritmo de ordenacion shell.