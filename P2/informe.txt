AUTORES:
 - Martín Del Río Álvarez          martin.delrio.alvarez@udc.es
 - Mateo Aguirre Cancela           mateo.aguirre@udc.es
 
INTRODUCCIÓN:
        Esta práctica se enfoca en analizar la complejidad computacional de dos algoritmos de ordenación: ordenación por inserción y ordenación shell. 
	Se generan vectores que actúan como entrada para evaluar el rendimiento de estos algoritmos en diversas situaciones.

OBJETIVO:
        El objetivo principal de esta práctica es medir los tiempos de ejecución de los algoritmos de ordenación por inserción y ordenación shell.
        Se ponen a prueba los algoritmos en diferentes condiciones, con datos ordenados de manera ascendente, descendente y desordenados.
        De esta manera podemos comparar sus tiempos en cada una de las condiciones para ver cual es más eficiente.

TEST:

ESPECIFIACIONES DE LA MÁQUINA:
	·Modelo: HUAWEI MateBook 14 AMD 2021
	·Procesador: AMD Ryzen 5 5500U
	·Memoria RAM: 8gb
	·Sistema operativo: Linux Ubuntu 22.04.3 LTS
	·Kernel: 6.2.0-33-generic

ACLARACIONES:
	Todas las unidades de tiempo estan medidas en microsegundos.

TABLAS DE TIEMPOS:
          
        VECTOR EN ORDEN ASCENDENTE
        Ordenacion por Insercion
                n              t(n)      t(n)/n^0.8          t(n)/n      t(n)/n^1.2
        (*)       500          3.422000        0.023719        0.006844        0.001975
        (*)      1000          4.978000        0.019818        0.004978        0.001250
        (*)      2000          9.981000        0.022822        0.004991        0.001091
        (*)      4000         20.192000        0.026517        0.005048        0.000961
        (*)      8000         41.976000        0.031661        0.005247        0.000870
        (*)     16000         85.774000        0.037159        0.005361        0.000773
        (*)     32000        164.947000        0.041042        0.005155        0.000647

        Ordenacion Shell
                n              t(n)      t(n)/n^0.8          t(n)/n      t(n)/n^1.2
        (*)       500         13.141000        0.091086        0.026282        0.007583
        (*)      1000         29.356000        0.116868        0.029356        0.007374
        (*)      2000         67.511000        0.154366        0.033756        0.007381
        (*)      4000        148.411000        0.194903        0.037103        0.007063
        (*)      8000        317.089000        0.239171        0.039636        0.006569
                16000        656.000000        0.284189        0.041000        0.005915
                32000       1403.000000        0.349090        0.043844        0.005507


        VECTOR EN ORDEN DESCENDENTE
        Ordenacion por Insercion
                n              t(n)      t(n)/n^1.8        t(n)/n^2      t(n)/n^2.2
        (*)       500        239.165000        0.003316        0.000957        0.000276
                1000        939.000000        0.003738        0.000939        0.000236
                2000       3749.000000        0.004286        0.000937        0.000205
                4000      15009.000000        0.004928        0.000938        0.000179
                8000      61871.000000        0.005833        0.000967        0.000160
                16000     256348.000000        0.006941        0.001001        0.000144
                32000    1030834.000000        0.008015        0.001007        0.000126

        Ordenacion Shell
                n              t(n)      t(n)/n^1.8        t(n)/n^2      t(n)/n^2.2
        (*)       500         19.169000        0.000266        0.000077        0.000022
        (*)      1000         44.060000        0.000175        0.000044        0.000011
        (*)      2000         98.458000        0.000113        0.000025        0.000005
        (*)      4000        213.126000        0.000070        0.000013        0.000003
        (*)      8000        455.447000        0.000043        0.000007        0.000001
                16000        928.000000        0.000025        0.000004        0.000001
                32000       2011.000000        0.000016        0.000002        0.000000


        VECTOR DESORDENADO
        Ordenacion por Insercion
                n              t(n)      t(n)/n^1.8        t(n)/n^2      t(n)/n^2.2
        (*)       500        127.798000        0.001772        0.000511        0.000147
        (*)      1000        486.701000        0.001938        0.000487        0.000122
                2000       1886.000000        0.002156        0.000472        0.000103
                4000       7396.000000        0.002428        0.000462        0.000088
                8000      29938.000000        0.002823        0.000468        0.000078
                16000     128845.000000        0.003489        0.000503        0.000073
                32000     497552.000000        0.003869        0.000486        0.000061

        Ordenacion Shell
                n              t(n)      t(n)/n^1.8        t(n)/n^2      t(n)/n^2.2
        (*)       500         47.611000        0.000660        0.000190        0.000055
        (*)      1000        109.139000        0.000434        0.000109        0.000027
        (*)      2000        246.922000        0.000282        0.000062        0.000013
                4000        512.000000        0.000168        0.000032        0.000006
                8000       1194.000000        0.000113        0.000019        0.000003
                16000       2625.000000        0.000071        0.000010        0.000001
                32000       6202.000000        0.000048        0.000006        0.000001

CONCLUSIONES:
        En resumen, esta práctica permitió analizar y comparar el rendimiento de los algoritmos de ordenación por inserción y ordenación shell en diversas condiciones. Los resultados destacan la importancia de elegir el algoritmo de ordenación adecuado según la naturaleza de los datos y las características del hardware y el entorno.
        Los resultados y conclusiones de esta práctica proporcionan información valiosa para la selección de algoritmos de ordenación en aplicaciones del mundo real, considerando las restricciones de tiempo y recursos de la máquina utilizada.


